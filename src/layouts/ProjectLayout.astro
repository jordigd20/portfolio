---
import Nav from '../components/Nav.astro';
import Head from '../components/Head.astro';
import GithubIcon from '../icons/Github.astro';
import ChevronLeftIcon from '../icons/ChevronLeft.astro';
import ChevronRightIcon from '../icons/ChevronRight.astro';
import VisitSiteIcon from '../icons/VisitSite.astro';
import Footer from '../components/Footer.astro';

const { frontmatter } = Astro.props;
const title = `Jordi GÃ³mez Devesa | ${frontmatter.title}`;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <Head title={title} description={frontmatter.description} />
  </head>
  <body class="bg-background">
    <header class="relative">
      <Nav className={frontmatter.navClass} />
      <div
        class="z-[-1] w-full h-[30rem] md:h-[21rem] absolute top-0"
        class:list={frontmatter.headerClass}
      >
      </div>
    </header>

    <div class="p-10 px-5 xl:px-20 flex justify-center gap-10 xl:m-auto">
      <div class="postImageContainer hidden lg:block lg:flex-initial overflow-x-hidden">
        {
          frontmatter.assets.map(({ url, type, alt }: any, index: number) =>
            type === 'video' ? (
              <video
                id={index.toString()}
                class="postImage lg:w-full xl:w-[initial] max-w-lg max-h-[36rem] m-auto"
                class:list={index !== 0 ? 'hidden' : ''}
                src={url}
                muted
                controls
              />
            ) : (
              <img
                id={index.toString()}
                class="postImage lg:w-full xl:w-[initial] max-w-lg max-h-[36rem] m-auto object-cover"
                class:list={index !== 0 ? 'hidden' : ''}
                src={url}
                alt={alt}
              />
            )
          )
        }
        <div class="text-black mt-3 flex items-center justify-center gap-3">
          <button
            class="prev bg-gradient-to-r from-[#38BDF8] to-[#45D9BF] rounded-lg p-2 hover:opacity-70"
            aria-label="Anterior"
          >
            <ChevronLeftIcon />
          </button>
          <div class="text-textColor">
            <span class="currentCount">1</span><span class="totalCount text-gray-400"
              >/{frontmatter.assets.length}</span
            >
          </div>
          <button
            class="next bg-gradient-to-r from-[#38BDF8] to-[#45D9BF] rounded-lg p-2 hover:opacity-70"
            aria-label="Siguiente"
          >
            <ChevronRightIcon />
          </button>
        </div>
      </div>
      <div class="text-textColor max-w-3xl lg:flex-1">
        <h1 class="text-white dark:text-textColor text-4xl sm:text-5xl font-bold mb-2">
          {frontmatter.title}
        </h1>
        <div class="pt-2 flex items-center flex-wrap gap-3 mb-2">
          {
            frontmatter.stack.map(({ name, classColor }: any) => (
              <div class="py-1 pl-2 pr-3 rounded-full flex items-center gap-2 bg-[#273449] dark:bg-[#181818]">
                <div class="w-5 h-5 rounded-full" class:list={classColor} />
                <span class="text-white">{name}</span>
              </div>
            ))
          }
        </div>
        <p class="mb-2 text-white dark:text-textColor">{frontmatter.date}</p>
        <div class="flex items-center gap-3 mb-5">
          <a
            class="text-black p-2 px-3 rounded-lg bg-gradient-to-r from-[#38BDF8] to-[#45D9BF] transition-transform hover:scale-105 flex items-center gap-2 [&>svg]:fill-black"
            href={frontmatter.github}
          >
            <GithubIcon />
            GitHub
          </a>
          <a
            class="text-black p-2 px-3 rounded-lg bg-gradient-to-r from-[#38BDF8] to-[#45D9BF] transition-transform hover:scale-105 flex items-center gap-2 [&>svg]:fill-black"
            href={frontmatter.site}
          >
            <VisitSiteIcon />
            Visitar
          </a>
        </div>
        <div class="postImageContainer lg:hidden overflow-x-hidden">
          {
            frontmatter.assets.map(({ url, type, alt }: any, index: number) =>
              type === 'video' ? (
                <video
                  id={index.toString()}
                  class="postImage w-full xl:w-[initial] max-w-lg max-h-[36rem] m-auto"
                  class:list={index !== 0 ? 'hidden' : ''}
                  src={url}
                  muted
                  controls
                />
              ) : (
                <img
                  id={index.toString()}
                  class="postImage w-full sm:w-auto lg:w-full xl:w-[initial] max-w-lg max-h-[36rem] m-auto object-cover"
                  class:list={index !== 0 ? 'hidden' : ''}
                  src={url}
                  alt={alt}
                  width="259.19px"
                />
              )
            )
          }
          <div class="text-black mt-3 flex items-center justify-center gap-3">
            <button
              class="prev bg-gradient-to-r from-[#38BDF8] to-[#45D9BF] rounded-lg p-2 hover:opacity-70"
              aria-label="Anterior"
            >
              <ChevronLeftIcon />
            </button>
            <div class="text-textColor">
              <span class="currentCount">1</span><span class="totalCount text-gray-400"
                >/{frontmatter.assets.length}</span
              >
            </div>
            <button
              class="next bg-gradient-to-r from-[#38BDF8] to-[#45D9BF] rounded-lg p-2 hover:opacity-70"
              aria-label="Siguiente"
            >
              <ChevronRightIcon />
            </button>
          </div>
        </div>

        <div
          class="p-5 lg:p-0 xl:pt-5 [&>h1]:text-3xl [&>h1]:font-bold [&>h1]:mb-4 [&>p]:mb-4 [&>h2]:font-bold [&>h2]:text-2xl [&>h2]:mb-2 [&>h2]:mt-8 [&>pre]:p-5 [&>pre]:mb-4 [&>pre]:whitespace-pre-wrap [&>pre]:text-justify [&>ul]:list-disc [&>ul>li]:mb-1 [&>ul>li:last-child]:mb-4 [&_a]:text-[#00C2FF] [&_a]:underline [&_a:hover]:opacity-50"
        >
          <slot />
        </div>
      </div>
    </div>
    <Footer />

    <script define:vars={{ assets: frontmatter.assets }}>
      const prevButtons = document.querySelectorAll('.prev');
      const nextButtons = document.querySelectorAll('.next');
      const currentCounters = document.querySelectorAll('.currentCount');
      const postImageContainer = document.querySelectorAll('.postImageContainer');
      const postImages = [];

      let i = 0;

      const prevImage = () => {
        const currentType = assets[i].type;
        const currentIndex = i;

        if (i == 0) {
          i = 0;
        } else {
          i--;
        }

        if (currentIndex === i) {
          return;
        }

        postImageContainer.forEach((container) => {
          const currentAsset = container.children.namedItem(currentIndex.toString());
          currentAsset.classList.remove('animate-enter-from-left');
          currentAsset.classList.remove('animate-enter-from-right');
          currentAsset.classList.add('animate-leave-to-right');
        });

        setTimeout(() => {
          postImageContainer.forEach((container) => {
            const currentAsset = container.children.namedItem(currentIndex.toString());
            const nextAsset = container.children.namedItem(i.toString());
            currentAsset.classList.remove('animate-leave-to-right');
            currentAsset.classList.add('hidden');
            nextAsset.classList.remove('hidden');
            nextAsset.classList.add('animate-enter-from-left');
          });

          postImages.forEach((image) => {
            image.src = assets[i].url;
            image.alt = assets[i].alt;
          });

          currentCounters.forEach((counter) => {
            counter.innerHTML = i + 1;
          });
        }, 190);
      };

      const nextImage = () => {
        const currentIndex = i;

        if (i === assets.length - 1) {
          i = assets.length - 1;
        } else {
          i++;
        }

        if (currentIndex === i) {
          return;
        }

        postImageContainer.forEach((container) => {
          const currentAsset = container.children.namedItem(currentIndex.toString());
          currentAsset.classList.remove('animate-enter-from-right');
          currentAsset.classList.remove('animate-enter-from-left');
          currentAsset.classList.add('animate-leave-to-left');
        });

        setTimeout(() => {
          postImageContainer.forEach((container) => {
            const currentAsset = container.children.namedItem(currentIndex.toString());
            const nextAsset = container.children.namedItem(i.toString());
            currentAsset.classList.remove('animate-leave-to-left');
            currentAsset.classList.add('hidden');
            nextAsset.classList.remove('hidden');
            nextAsset.classList.add('animate-enter-from-right');
          });

          postImages.forEach((image) => {
            image.src = assets[i].url;
            image.alt = assets[i].alt;
          });

          currentCounters.forEach((counter) => {
            counter.innerHTML = i + 1;
          });
        }, 190);
      };

      prevButtons.forEach((btn) => {
        btn.addEventListener('click', () => prevImage());
      });

      nextButtons.forEach((btn) => {
        btn.addEventListener('click', () => nextImage());
      });
    </script>
  </body>
</html>
