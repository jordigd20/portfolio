---
import { getRelativeLocaleUrl } from 'astro:i18n';
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import Close from '../icons/Close.astro';
import Dark from '../icons/Dark.astro';
import Light from '../icons/Light.astro';
import Logo from '../icons/Logo.astro';
import LanguagePicker from './LanguagePicker.astro';

export interface Props {
  navLinks: {
    label: string;
    url: string;
  }[];
  socialLinks: {
    label: string;
    url: string;
    Icon: any;
  }[];
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { navLinks, socialLinks } = Astro.props;
---

<dialog id="navMobile" class="[&::backdrop]:bg-black/30">
  <div
    id="navMobileContent"
    class="fixed bg-background text-primary w-3/4 py-6 px-6 m-0 left-0 min-h-full max-w-sm inset-y-0 border-r border-border animate-slide-in"
  >
    <a
      href={getRelativeLocaleUrl(lang)}
      class="inline-flex items-center flex-wrap gap-2 text-md"
      aria-label={t('aria-label.nav.home')}
    >
      <Logo width={28} height={25} padding="p-1.5" />
      Jordi GÃ³mez Devesa
    </a>

    <button
      class="absolute text-primary right-4 top-4 rounded-md transition-opacity opacity-70 ring-offset-background focus:outline-none focus:ring-2 focus:ring-offset-2 hover:opacity-100"
      id="closeMobileNavBtn"
    >
      <Close />
      <span class="sr-only">Close</span>
    </button>

    <div class="my-4 w-full">
      {
        navLinks.map((link) => (
          <a
            href={link.url}
            class="nav-link block py-3 text-sm font-medium nav-link border-b border-[#3fcbdb] hover:opacity-80"
          >
            {link.label}
          </a>
        ))
      }
    </div>

    <div class="flex items-center justify-between gap-2 flex-wrap">
      <div class="flex items-center gap-2">
        {
          socialLinks.map(({ label, url, Icon }) => (
            <a
              class="transition-transform hover:scale-110 [&>svg]:fill-textColor"
              href={url}
              target="_blank"
              aria-label={label}
            >
              <Icon />
            </a>
          ))
        }
      </div>

      <div class="flex items-center gap-1">
        <button
          id="toggleThemeMobileBtn"
          class="text-primary py-1 px-1 border border-border rounded-md transition-[background-color] shadow-sm hover:bg-accent"
          aria-label={t('aria-label.nav.theme')}
        >
          <Light id="light-icon" class="theme-icon hidden" />
          <Dark id="dark-icon" class="theme-icon hidden" />
        </button>

        <div class="relative">
          <LanguagePicker
            buttonId="language-button-mobile"
            menuId="language-menu-mobile"
            isMobile={true}
          />
        </div>
      </div>
    </div>
  </div>
</dialog>

<script>
  function initMobileNav() {
    const closeMobileNavBtn = document.getElementById('closeMobileNavBtn') as HTMLButtonElement;
    const navMobile = document.getElementById('navMobile') as HTMLDialogElement;
    const navMobileContent = document.getElementById('navMobileContent') as HTMLDivElement;
    const navMobileLinks = navMobileContent.querySelectorAll('a');
    const toggleThemeMobileBtn = document.getElementById(
      'toggleThemeMobileBtn'
    ) as HTMLButtonElement;

    closeMobileNavBtn.addEventListener('click', () => {
      closeAnimation();
    });

    navMobileLinks.forEach((link) => {
      link.addEventListener('click', () => {
        closeAnimation();
      });
    });

    navMobile.addEventListener('animationend', (ev) => {
      if (ev.animationName === 'slide-out') {
        closeMobileNav();
      }
    });

    navMobile.addEventListener('click', (ev) => {
      if (ev.target === navMobile) {
        closeAnimation();
      }
    });

    function closeAnimation() {
      navMobileContent.classList.remove('animate-slide-in');
      navMobileContent.classList.add('animate-slide-out');
    }

    function closeMobileNav() {
      navMobile.close();
      navMobileContent.classList.remove('animate-slide-out');
      navMobileContent.classList.add('animate-slide-in');
    }

    toggleThemeMobileBtn.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      document.documentElement.classList[!isDark ? 'add' : 'remove']('dark');
      updateIcon(isDark ? 'light-icon' : 'dark-icon');
    });

    function updateIcon(theme: 'light-icon' | 'dark-icon') {
      const themeIcons = document.querySelectorAll('.theme-icon');

      themeIcons.forEach((icon) => {
        icon.id === theme ? icon.classList.remove('hidden') : icon.classList.add('hidden');
      });
    }
  }

  initMobileNav();
</script>
