---
import { projects, type Project } from '../data/projects';
import ProjectCard from '../components/ProjectCard.astro';
import { getLangFromUrl } from '../i18n/utils';
import { getRelativeLocaleUrl } from 'astro:i18n';

const lang = getLangFromUrl(Astro.url);
const projectList: Project[] = projects.map((project) => ({
  ...project,
  url: `${getRelativeLocaleUrl(lang)}${project.url}`
}));
---

<section id="projects" class="text-textColor px-2 sm:px-5 mb-28 opacity-0 animate-section">
  <h2
    class="text-2xl mb-10 font-bold relative flex items-center gap-2 before:absolute before:block before:w-24 before:h-1 before:-bottom-3 before:left-0 before:bg-gradient-to-r before:from-[#38bdf8] before:to-[#45d9bf] before:rounded-full"
  >
    <svg
      class="size-7"
      xmlns="http://www.w3.org/2000/svg"
      width="1em"
      height="1em"
      viewBox="0 0 256 256"
      ><path
        fill="currentColor"
        d="M181.66 146.34a8 8 0 0 1 0 11.32l-24 24a8 8 0 0 1-11.32-11.32L164.69 152l-18.35-18.34a8 8 0 0 1 11.32-11.32Zm-72-24a8 8 0 0 0-11.32 0l-24 24a8 8 0 0 0 0 11.32l24 24a8 8 0 0 0 11.32-11.32L91.31 152l18.35-18.34a8 8 0 0 0 0-11.32M216 88v128a16 16 0 0 1-16 16H56a16 16 0 0 1-16-16V40a16 16 0 0 1 16-16h96a8 8 0 0 1 5.66 2.34l56 56A8 8 0 0 1 216 88m-56-8h28.69L160 51.31Zm40 136V96h-48a8 8 0 0 1-8-8V40H56v176z"
      ></path></svg
    >
    Proyectos
  </h2>

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
    {
      projectList.map(({ id, title, description, stack, image, imageClass, url, type }) => (
        <ProjectCard
          id={id}
          title={title}
          description={description}
          stack={stack}
          image={image}
          imageClass={imageClass}
          url={url}
          type={type}
        />
      ))
    }
  </div>
</section>

<script>
  const cards = document.querySelectorAll('.project-card');

  initIntersectionAnimation();
  initIconsColor();

  function initIntersectionAnimation() {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove('translate-y-24');
            entry.target.classList.remove('opacity-0');
            observer.unobserve(entry.target);
          } else {
            entry.target.classList.add('translate-y-24');
            entry.target.classList.add('opacity-0');
          }
        });
      },
      {
        threshold: 0.1
      }
    );

    cards.forEach((card) => observer.observe(card));
  }

  function initIconsColor() {
    const icons: NodeListOf<HTMLDivElement> = document.querySelectorAll(
      '#projects article .tech-icon'
    );

    icons.forEach((icon) => {
      const color: string = icon.getAttribute('data-color')!;

      icon.addEventListener('mouseenter', () => {
        icon.style.backgroundColor = color;
      });

      icon.addEventListener('mouseleave', () => {
        icon.style.backgroundColor = 'var(--primary)';
      });
    });
  }
</script>
