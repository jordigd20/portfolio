---
import Logo from '../icons/Logo.astro';
import MenuRight from '../icons/MenuRight.astro';
import GithubIcon from '../icons/Github.astro';
import LinkedInIcon from '../icons/LinkedIn.astro';
import EmailIcon from '../icons/Email.astro';
import Dark from '../icons/Dark.astro';
import Light from '../icons/Light.astro';
import NavMobile from './NavMobile.astro';
import LanguagePicker from './LanguagePicker.astro';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navLinks: { label: string; url: string }[] = [
  { label: t('nav.projects'), url: `${getRelativeLocaleUrl(lang)}#projects` },
  { label: t('nav.about-me'), url: `${getRelativeLocaleUrl(lang)}#about-me` },
  { label: t('nav.contact'), url: `${getRelativeLocaleUrl(lang)}#contact` }
];

const socialLinks = [
  { label: 'Email', url: 'mailto:jordigd8@gmail.com', Icon: EmailIcon },
  { label: 'GitHub', url: 'https://github.com/jordigd20', Icon: GithubIcon },
  {
    label: 'LinkedIn',
    url: 'https://www.linkedin.com/in/jordi-gomez-devesa/',
    Icon: LinkedInIcon
  }
];
---

<header class="block w-full border-b border-border text-primary">
  <div class="container flex items-center justify-between h-16">
    <div class="relative p-5 w-full flex items-center justify-between lg:p-0 lg:w-auto">
      <a
        href={getRelativeLocaleUrl(lang)}
        class="hidden xxs:flex items-center gap-3 text-lg sm:text-xl font-medium"
        aria-label={t('aria-label.nav.home')}
      >
        <Logo width={40} height={35} />
        Jordi GÃ³mez Devesa
      </a>

      <a href={getRelativeLocaleUrl(lang)} class="xxs:hidden" aria-label={t('aria-label.nav.home')}>
        <Logo width={35} height={30} />
      </a>

      <button
        class="z-50 lg:hidden cursor-pointer"
        id="mobileNavBtn"
        aria-label={t('aria-label.nav.mobile-menu')}
      >
        <MenuRight />
      </button>
    </div>

    <nav
      class="p-3 hidden opacity-0 lg:opacity-100 lg:flex lg:static lg:items-center lg:justify-center lg:gap-10"
    >
      {
        navLinks.map(({ label, url }) => (
          <a
            class="nav-link relative font-medium px-5 lg:px-0 hover:font-bold hover:text-transparent hover:bg-clip-text hover:bg-gradient-to-r hover:from-[#38BDF8] hover:to-[#45D9BF]"
            href={url}
          >
            {label}
          </a>
        ))
      }
    </nav>

    <div class="hidden lg:block lg:w-auto">
      <div class="flex items-center justify-between">
        <div class="px-4 flex items-center gap-2">
          {
            socialLinks.map(({ label, url, Icon }) => (
              <a
                class="transition-transform hover:scale-110 [&>svg]:fill-textColor"
                href={url}
                target="_blank"
                aria-label={label}
              >
                <Icon />
              </a>
            ))
          }
        </div>

        <button
          id="toggleThemeBtn"
          class="text-primary py-1 px-1 mx-1 border border-border rounded-md transition-[background-color] shadow-sm hover:bg-background dark:hover:bg-accent"
          aria-label={t('aria-label.nav.theme')}
        >
          <Light id="light-icon" class="theme-icon hidden" />
          <Dark id="dark-icon" class="theme-icon hidden" />
        </button>

        <div class="mx-1 relative">
          <LanguagePicker buttonId="language-button" menuId="language-menu" />
        </div>
      </div>
    </div>
  </div>
</header>

<NavMobile navLinks={navLinks} socialLinks={socialLinks} />

<script>
  import dialogPolyfill from 'dialog-polyfill';

  function setUpEventListeners() {
    const mobileNavBtn = document.getElementById('mobileNavBtn') as HTMLButtonElement;
    const navMobile = document.getElementById('navMobile') as HTMLDialogElement;
    const toggleThemeBtn = document.getElementById('toggleThemeBtn') as HTMLButtonElement;

    dialogPolyfill.registerDialog(navMobile);

    mobileNavBtn.addEventListener('click', () => {
      navMobile.showModal();
    });

    toggleThemeBtn.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      document.documentElement.classList[!isDark ? 'add' : 'remove']('dark');
      localStorage.setItem('theme', isDark ? 'light' : 'dark');
      updateIcon(isDark ? 'light-icon' : 'dark-icon');
    });

    const isDark = document.documentElement.classList.contains('dark');
    updateIcon(isDark ? 'dark-icon' : 'light-icon');
  }

  function updateIcon(theme: 'light-icon' | 'dark-icon') {
    const themeIcons = document.querySelectorAll('.theme-icon');

    themeIcons.forEach((icon) => {
      icon.id === theme ? icon.classList.remove('hidden') : icon.classList.add('hidden');
    });
  }

  setUpEventListeners();
</script>
